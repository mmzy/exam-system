<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.exam.mapper.SubjectclassesMapper" >
  
  <resultMap id="TeacherSubject" type="com.exam.pojo.util.TeacherSubject" >
    <id column="teacherId" property="teacherId" jdbcType="VARCHAR" />
    <id column="subjectId" property="subjectId" jdbcType="INTEGER" />
    <id column="teacherName" property="teacherName" jdbcType="VARCHAR" />
    <id column="subjectName" property="subjectName" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="BaseResultMap" type="com.exam.pojo.SubjectclassesKey" >
    <id column="classesId" property="classesid" jdbcType="INTEGER" />
    <id column="id" property="id" jdbcType="INTEGER" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    classesId, id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.exam.pojo.SubjectclassesExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from subjectclasses
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.exam.pojo.SubjectclassesKey" >
    delete from subjectclasses
    where classesId = #{classesid,jdbcType=INTEGER}
      and id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.exam.pojo.SubjectclassesExample" >
    delete from subjectclasses
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.exam.pojo.SubjectclassesKey" >
    insert into subjectclasses (classesId, id)
    values (#{classesid,jdbcType=INTEGER}, #{id,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.exam.pojo.SubjectclassesKey" >
    insert into subjectclasses
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="classesid != null" >
        classesId,
      </if>
      <if test="id != null" >
        id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="classesid != null" >
        #{classesid,jdbcType=INTEGER},
      </if>
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.exam.pojo.SubjectclassesExample" resultType="java.lang.Integer" >
    select count(*) from subjectclasses
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update subjectclasses
    <set >
      <if test="record.classesid != null" >
        classesId = #{record.classesid,jdbcType=INTEGER},
      </if>
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update subjectclasses
    set classesId = #{record.classesid,jdbcType=INTEGER},
      id = #{record.id,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
  
  <select id="getSubjectClassesTeacherList" parameterType="int" resultMap="TeacherSubject" >
   	SELECT s.id subjectId,t.id teacherId,t.NAME teacherName,s.NAME subjectName
	from  subject s,teacher_classes tc , teacher t
	where s.id = tc.subId and tc.id = t.id and tc.classesId = #{classesId}
  </select>
  
  <select id="getSubjectClassesNotTeacherList" parameterType="int" resultMap="TeacherSubject" >
   	SELECT s.id subjectId,t.id teacherId,t.NAME teacherName,s.NAME subjectName
	from subject s, teacher t ,
	(SELECT ts.id, ts.sub_id
	FROM teacher_subject ts
	WHERE ts.sub_id NOT IN(
	SELECT sc.id FROM subjectclasses sc
	WHERE sc.classesId = #{classesId})) ts
	where  ts.id = t.id and s.id = ts.sub_id
	order by s.id
  </select>
</mapper>